
/**
 * This Java model was automatically generated by the ehealth-taxtool tool 
 * from taxonomy to older adult healthcare applications 
 * 
 * Araujo, I. L. D., Costa Junior, E., Duarte, P., Santos, I. D. S., 
 * Oliveira, P. A. M. D., Mendes, C. M. O., & Andrade, R. M. D. C. 
 * Towards a Taxonomy for the Development of Older Adults Healthcare 
 * Applications. In: Proceedings of the 53rd Hawaii International 
 * Conference on System Sciences. 2020.
 * 
 * This instrument aims to support the development of these applications.
 * 
 * Application Type: Application to Assist Older Adults Care
 * Application Type Description: Application to assist older adult care corresponds to applications aimed at caregivers (family or professional) of older adults.
 * Creation date: 2020-03-23T19:53:50.933Z
 * 
 * @author GREat Lab
 * @Link http://great.ufc.br
 */

class OlderAdult{
    constructor(isDependent, refPerson, caregiverName, doctorName, healthPublicID, name, birthday, gender, nationality, schooling, ethnicity, religion, conjugalSituation, allergies, bloodType, deficiencies, contacts, diseaseinfo, surgery, adversereaction, bloodpressure, glucose, vaccination, medicalinquiriesschedule, chronicpain, fall){
         
        // Essential Field
        this.isDependent = isDependent;
         
        // Essential Field
        this.refPerson = refPerson;
         
        // Essential Field
        this.caregiverName = caregiverName;
         
        // Essential Field
        this.doctorName = doctorName;
         
        // Optional Field
        this.healthPublicID = healthPublicID;
         
        // Essential Field
        this.name = name;
         
        // Essential Field
        this.birthday = birthday;
         
        // Essential Field
        this.gender = gender;
         
        // Essential Field
        this.nationality = nationality;
         
        // Essential Field
        this.schooling = schooling;
         
        // Optional Field
        this.ethnicity = ethnicity;
         
        // Essential Field
        this.religion = religion;
         
        // Essential Field
        this.conjugalSituation = conjugalSituation;
         
        // Essential Field
        this.allergies = allergies;
         
        // Essential Field
        this.bloodType = bloodType;
         
        // Essential Field
        this.deficiencies = deficiencies;
         
        // Essential Field
        this.contacts = contacts;
         
        // Essential Field
        this.diseaseinfo = diseaseinfo;
         
        // Essential Field
        this.surgery = surgery;
         
        // Essential Field
        this.adversereaction = adversereaction;
         
        // Essential Field
        this.bloodpressure = bloodpressure;
         
        // Essential Field
        this.glucose = glucose;
         
        // Essential Field
        this.vaccination = vaccination;
         
        // Essential Field
        this.medicalinquiriesschedule = medicalinquiriesschedule;
         
        // Essential Field
        this.chronicpain = chronicpain;
         
        // Essential Field
        this.fall = fall;
        
    };
    
	
    getIsDependent() {
		return this.isDependent;
	};

	setIsDependent(isDependent) {
		this.isDependent = isDependent;
	};
    
    getRefPerson() {
		return this.refPerson;
	};

	setRefPerson(refPerson) {
		this.refPerson = refPerson;
	};
    
    getCaregiverName() {
		return this.caregiverName;
	};

	setCaregiverName(caregiverName) {
		this.caregiverName = caregiverName;
	};
    
    getDoctorName() {
		return this.doctorName;
	};

	setDoctorName(doctorName) {
		this.doctorName = doctorName;
	};
    
    getHealthPublicID() {
		return this.healthPublicID;
	};

	setHealthPublicID(healthPublicID) {
		this.healthPublicID = healthPublicID;
	};
    
    getName() {
		return this.name;
	};

	setName(name) {
		this.name = name;
	};
    
    getBirthday() {
		return this.birthday;
	};

	setBirthday(birthday) {
		this.birthday = birthday;
	};
    
    getGender() {
		return this.gender;
	};

	setGender(gender) {
		this.gender = gender;
	};
    
    getNationality() {
		return this.nationality;
	};

	setNationality(nationality) {
		this.nationality = nationality;
	};
    
    getSchooling() {
		return this.schooling;
	};

	setSchooling(schooling) {
		this.schooling = schooling;
	};
    
    getEthnicity() {
		return this.ethnicity;
	};

	setEthnicity(ethnicity) {
		this.ethnicity = ethnicity;
	};
    
    getReligion() {
		return this.religion;
	};

	setReligion(religion) {
		this.religion = religion;
	};
    
    getConjugalSituation() {
		return this.conjugalSituation;
	};

	setConjugalSituation(conjugalSituation) {
		this.conjugalSituation = conjugalSituation;
	};
    
    getAllergies() {
		return this.allergies;
	};

	setAllergies(allergies) {
		this.allergies = allergies;
	};
    
    getBloodType() {
		return this.bloodType;
	};

	setBloodType(bloodType) {
		this.bloodType = bloodType;
	};
    
    getDeficiencies() {
		return this.deficiencies;
	};

	setDeficiencies(deficiencies) {
		this.deficiencies = deficiencies;
	};
    
    getContacts() {
		return this.contacts;
	};

	setContacts(contacts) {
		this.contacts = contacts;
	};
    
    getDiseaseInfo() {
		return this.diseaseinfo;
	};

	setDiseaseInfo(diseaseinfo) {
		this.diseaseinfo = diseaseinfo;
	};
    
    getSurgery() {
		return this.surgery;
	};

	setSurgery(surgery) {
		this.surgery = surgery;
	};
    
    getAdverseReaction() {
		return this.adversereaction;
	};

	setAdverseReaction(adversereaction) {
		this.adversereaction = adversereaction;
	};
    
    getBloodPressure() {
		return this.bloodpressure;
	};

	setBloodPressure(bloodpressure) {
		this.bloodpressure = bloodpressure;
	};
    
    getGlucose() {
		return this.glucose;
	};

	setGlucose(glucose) {
		this.glucose = glucose;
	};
    
    getVaccination() {
		return this.vaccination;
	};

	setVaccination(vaccination) {
		this.vaccination = vaccination;
	};
    
    getMedicalInquiriesSchedule() {
		return this.medicalinquiriesschedule;
	};

	setMedicalInquiriesSchedule(medicalinquiriesschedule) {
		this.medicalinquiriesschedule = medicalinquiriesschedule;
	};
    
    getChronicPain() {
		return this.chronicpain;
	};

	setChronicPain(chronicpain) {
		this.chronicpain = chronicpain;
	};
    
    getFall() {
		return this.fall;
	};

	setFall(fall) {
		this.fall = fall;
	};
    
};

class SocialFamilyInfo{
    constructor(howLivesWithTheOlderAdult, performedActivities, hasEasyTransportAccess, isActivelyWork, incomeSources){
         
        // Essential Field
        this.howLivesWithTheOlderAdult = howLivesWithTheOlderAdult;
         
        // Essential Field
        this.performedActivities = performedActivities;
         
        // Essential Field
        this.hasEasyTransportAccess = hasEasyTransportAccess;
         
        // Essential Field
        this.isActivelyWork = isActivelyWork;
         
        // Optional Field
        this.incomeSources = incomeSources;
        
    };
    
	
    getHowLivesWithTheOlderAdult() {
		return this.howLivesWithTheOlderAdult;
	};

	setHowLivesWithTheOlderAdult(howLivesWithTheOlderAdult) {
		this.howLivesWithTheOlderAdult = howLivesWithTheOlderAdult;
	};
    
    getPerformedActivities() {
		return this.performedActivities;
	};

	setPerformedActivities(performedActivities) {
		this.performedActivities = performedActivities;
	};
    
    getHasEasyTransportAccess() {
		return this.hasEasyTransportAccess;
	};

	setHasEasyTransportAccess(hasEasyTransportAccess) {
		this.hasEasyTransportAccess = hasEasyTransportAccess;
	};
    
    getIsActivelyWork() {
		return this.isActivelyWork;
	};

	setIsActivelyWork(isActivelyWork) {
		this.isActivelyWork = isActivelyWork;
	};
    
    getIncomeSources() {
		return this.incomeSources;
	};

	setIncomeSources(incomeSources) {
		this.incomeSources = incomeSources;
	};
    
};

class ReferencePerson{
    constructor(name, birthday, contact, refPersonLivesWithTheOlderAdult){
         
        // Essential Field
        this.name = name;
         
        // Optional Field
        this.birthday = birthday;
         
        // Essential Field
        this.contact = contact;
         
        // Essential Field
        this.refPersonLivesWithTheOlderAdult = refPersonLivesWithTheOlderAdult;
        
    };
    
	
    getName() {
		return this.name;
	};

	setName(name) {
		this.name = name;
	};
    
    getBirthday() {
		return this.birthday;
	};

	setBirthday(birthday) {
		this.birthday = birthday;
	};
    
    getContact() {
		return this.contact;
	};

	setContact(contact) {
		this.contact = contact;
	};
    
    getRefPersonLivesWithTheOlderAdult() {
		return this.refPersonLivesWithTheOlderAdult;
	};

	setRefPersonLivesWithTheOlderAdult(refPersonLivesWithTheOlderAdult) {
		this.refPersonLivesWithTheOlderAdult = refPersonLivesWithTheOlderAdult;
	};
    
};

class OlderAdultEvaluation{
    constructor(medicationPrescription, healthProfessionalOfMedication, hasPolypharmacy){
         
        // Essential Field
        this.medicationPrescription = medicationPrescription;
         
        // Essential Field
        this.healthProfessionalOfMedication = healthProfessionalOfMedication;
         
        // Essential Field
        this.hasPolypharmacy = hasPolypharmacy;
        
    };
    
	
    getMedicationPrescription() {
		return this.medicationPrescription;
	};

	setMedicationPrescription(medicationPrescription) {
		this.medicationPrescription = medicationPrescription;
	};
    
    getHealthProfessionalOfMedication() {
		return this.healthProfessionalOfMedication;
	};

	setHealthProfessionalOfMedication(healthProfessionalOfMedication) {
		this.healthProfessionalOfMedication = healthProfessionalOfMedication;
	};
    
    getHasPolypharmacy() {
		return this.hasPolypharmacy;
	};

	setHasPolypharmacy(hasPolypharmacy) {
		this.hasPolypharmacy = hasPolypharmacy;
	};
    
};

class DiseaseInfo{
    constructor(disease, gravity, diagnosisDate, hospitalizationDate, diseaseObservations){
         
        // Essential Field
        this.disease = disease;
         
        // Essential Field
        this.gravity = gravity;
         
        // Essential Field
        this.diagnosisDate = diagnosisDate;
         
        // Essential Field
        this.hospitalizationDate = hospitalizationDate;
         
        // Optional Field
        this.diseaseObservations = diseaseObservations;
        
    };
    
	
    getDisease() {
		return this.disease;
	};

	setDisease(disease) {
		this.disease = disease;
	};
    
    getGravity() {
		return this.gravity;
	};

	setGravity(gravity) {
		this.gravity = gravity;
	};
    
    getDiagnosisDate() {
		return this.diagnosisDate;
	};

	setDiagnosisDate(diagnosisDate) {
		this.diagnosisDate = diagnosisDate;
	};
    
    getHospitalizationDate() {
		return this.hospitalizationDate;
	};

	setHospitalizationDate(hospitalizationDate) {
		this.hospitalizationDate = hospitalizationDate;
	};
    
    getDiseaseObservations() {
		return this.diseaseObservations;
	};

	setDiseaseObservations(diseaseObservations) {
		this.diseaseObservations = diseaseObservations;
	};
    
};

class Surgery{
    constructor(bodyParts, date, healthProfessionals, observations){
         
        // Essential Field
        this.bodyParts = bodyParts;
         
        // Essential Field
        this.date = date;
         
        // Optional Field
        this.healthProfessionals = healthProfessionals;
         
        // Optional Field
        this.observations = observations;
        
    };
    
	
    getBodyParts() {
		return this.bodyParts;
	};

	setBodyParts(bodyParts) {
		this.bodyParts = bodyParts;
	};
    
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getHealthProfessionals() {
		return this.healthProfessionals;
	};

	setHealthProfessionals(healthProfessionals) {
		this.healthProfessionals = healthProfessionals;
	};
    
    getObservations() {
		return this.observations;
	};

	setObservations(observations) {
		this.observations = observations;
	};
    
};

class AdverseReaction{
    constructor(medication, date, symptoms){
         
        // Essential Field
        this.medication = medication;
         
        // Essential Field
        this.date = date;
         
        // Essential Field
        this.symptoms = symptoms;
        
    };
    
	
    getMedication() {
		return this.medication;
	};

	setMedication(medication) {
		this.medication = medication;
	};
    
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getSymptoms() {
		return this.symptoms;
	};

	setSymptoms(symptoms) {
		this.symptoms = symptoms;
	};
    
};

class Nutrition{
    constructor(feedingRoutine, anthropometricData){
         
        // Essential Field
        this.feedingRoutine = feedingRoutine;
         
        // Optional Field
        this.anthropometricData = anthropometricData;
        
    };
    
	
    getFeedingRoutine() {
		return this.feedingRoutine;
	};

	setFeedingRoutine(feedingRoutine) {
		this.feedingRoutine = feedingRoutine;
	};
    
    getAnthropometricData() {
		return this.anthropometricData;
	};

	setAnthropometricData(anthropometricData) {
		this.anthropometricData = anthropometricData;
	};
    
};

class VulnerabilityIdentification{
    constructor(selfPerceptionOfHealth, physicalLiminationsAndGravity, disabilities){
         
        // Essential Field
        this.selfPerceptionOfHealth = selfPerceptionOfHealth;
         
        // Essential Field
        this.physicalLiminationsAndGravity = physicalLiminationsAndGravity;
         
        // Essential Field
        this.disabilities = disabilities;
        
    };
    
	
    getSelfPerceptionOfHealth() {
		return this.selfPerceptionOfHealth;
	};

	setSelfPerceptionOfHealth(selfPerceptionOfHealth) {
		this.selfPerceptionOfHealth = selfPerceptionOfHealth;
	};
    
    getPhysicalLiminationsAndGravity() {
		return this.physicalLiminationsAndGravity;
	};

	setPhysicalLiminationsAndGravity(physicalLiminationsAndGravity) {
		this.physicalLiminationsAndGravity = physicalLiminationsAndGravity;
	};
    
    getDisabilities() {
		return this.disabilities;
	};

	setDisabilities(disabilities) {
		this.disabilities = disabilities;
	};
    
};

class BloodPressure{
    constructor(date, measurement){
         
        // Essential Field
        this.date = date;
         
        // Essential Field
        this.measurement = measurement;
        
    };
    
	
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getMeasurement() {
		return this.measurement;
	};

	setMeasurement(measurement) {
		this.measurement = measurement;
	};
    
};

class Glucose{
    constructor(date, measurement){
         
        // Essential Field
        this.date = date;
         
        // Essential Field
        this.measurement = measurement;
        
    };
    
	
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getMeasurement() {
		return this.measurement;
	};

	setMeasurement(measurement) {
		this.measurement = measurement;
	};
    
};

class Vaccination{
    constructor(vaccineName, date, batch){
         
        // Essential Field
        this.vaccineName = vaccineName;
         
        // Essential Field
        this.date = date;
         
        // Optional Field
        this.batch = batch;
        
    };
    
	
    getVaccineName() {
		return this.vaccineName;
	};

	setVaccineName(vaccineName) {
		this.vaccineName = vaccineName;
	};
    
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getBatch() {
		return this.batch;
	};

	setBatch(batch) {
		this.batch = batch;
	};
    
};

class OralHealthInfo{
    constructor(isSmoker, drinkAlcoholFrequency, hasMucosaInjury, hasDentalCavity, hasPeriodontalDisease, useDentalProsthesis, hasOralClinicalFollowup){
         
        // Essential Field
        this.isSmoker = isSmoker;
         
        // Essential Field
        this.drinkAlcoholFrequency = drinkAlcoholFrequency;
         
        // Essential Field
        this.hasMucosaInjury = hasMucosaInjury;
         
        // Essential Field
        this.hasDentalCavity = hasDentalCavity;
         
        // Essential Field
        this.hasPeriodontalDisease = hasPeriodontalDisease;
         
        // Essential Field
        this.useDentalProsthesis = useDentalProsthesis;
         
        // Essential Field
        this.hasOralClinicalFollowup = hasOralClinicalFollowup;
        
    };
    
	
    getIsSmoker() {
		return this.isSmoker;
	};

	setIsSmoker(isSmoker) {
		this.isSmoker = isSmoker;
	};
    
    getDrinkAlcoholFrequency() {
		return this.drinkAlcoholFrequency;
	};

	setDrinkAlcoholFrequency(drinkAlcoholFrequency) {
		this.drinkAlcoholFrequency = drinkAlcoholFrequency;
	};
    
    getHasMucosaInjury() {
		return this.hasMucosaInjury;
	};

	setHasMucosaInjury(hasMucosaInjury) {
		this.hasMucosaInjury = hasMucosaInjury;
	};
    
    getHasDentalCavity() {
		return this.hasDentalCavity;
	};

	setHasDentalCavity(hasDentalCavity) {
		this.hasDentalCavity = hasDentalCavity;
	};
    
    getHasPeriodontalDisease() {
		return this.hasPeriodontalDisease;
	};

	setHasPeriodontalDisease(hasPeriodontalDisease) {
		this.hasPeriodontalDisease = hasPeriodontalDisease;
	};
    
    getUseDentalProsthesis() {
		return this.useDentalProsthesis;
	};

	setUseDentalProsthesis(useDentalProsthesis) {
		this.useDentalProsthesis = useDentalProsthesis;
	};
    
    getHasOralClinicalFollowup() {
		return this.hasOralClinicalFollowup;
	};

	setHasOralClinicalFollowup(hasOralClinicalFollowup) {
		this.hasOralClinicalFollowup = hasOralClinicalFollowup;
	};
    
};

class MedicalInquiriesSchedule{
    constructor(date, local, resultsDetail, professionalName){
         
        // Essential Field
        this.date = date;
         
        // Essential Field
        this.local = local;
         
        // Essential Field
        this.resultsDetail = resultsDetail;
         
        // Essential Field
        this.professionalName = professionalName;
        
    };
    
	
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getLocal() {
		return this.local;
	};

	setLocal(local) {
		this.local = local;
	};
    
    getResultsDetail() {
		return this.resultsDetail;
	};

	setResultsDetail(resultsDetail) {
		this.resultsDetail = resultsDetail;
	};
    
    getProfessionalName() {
		return this.professionalName;
	};

	setProfessionalName(professionalName) {
		this.professionalName = professionalName;
	};
    
};

class AdditionalHealthInfo{
    constructor(forgetfulnessPerceptions, forgetfulnessImpediments, despondencyFeelings, lossOfInterestInActivities){
         
        // Essential Field
        this.forgetfulnessPerceptions = forgetfulnessPerceptions;
         
        // Essential Field
        this.forgetfulnessImpediments = forgetfulnessImpediments;
         
        // Essential Field
        this.despondencyFeelings = despondencyFeelings;
         
        // Essential Field
        this.lossOfInterestInActivities = lossOfInterestInActivities;
        
    };
    
	
    getForgetfulnessPerceptions() {
		return this.forgetfulnessPerceptions;
	};

	setForgetfulnessPerceptions(forgetfulnessPerceptions) {
		this.forgetfulnessPerceptions = forgetfulnessPerceptions;
	};
    
    getForgetfulnessImpediments() {
		return this.forgetfulnessImpediments;
	};

	setForgetfulnessImpediments(forgetfulnessImpediments) {
		this.forgetfulnessImpediments = forgetfulnessImpediments;
	};
    
    getDespondencyFeelings() {
		return this.despondencyFeelings;
	};

	setDespondencyFeelings(despondencyFeelings) {
		this.despondencyFeelings = despondencyFeelings;
	};
    
    getLossOfInterestInActivities() {
		return this.lossOfInterestInActivities;
	};

	setLossOfInterestInActivities(lossOfInterestInActivities) {
		this.lossOfInterestInActivities = lossOfInterestInActivities;
	};
    
};

class LifeHabits{
    constructor(drinkAlcohol, hasAlcoholProblems, smokingStatus, doPhysicalActivities, doLeisureActivities, centerClubsFrequency){
         
        // Essential Field
        this.drinkAlcohol = drinkAlcohol;
         
        // Essential Field
        this.hasAlcoholProblems = hasAlcoholProblems;
         
        // Essential Field
        this.smokingStatus = smokingStatus;
         
        // Essential Field
        this.doPhysicalActivities = doPhysicalActivities;
         
        // Essential Field
        this.doLeisureActivities = doLeisureActivities;
         
        // Essential Field
        this.centerClubsFrequency = centerClubsFrequency;
        
    };
    
	
    getDrinkAlcohol() {
		return this.drinkAlcohol;
	};

	setDrinkAlcohol(drinkAlcohol) {
		this.drinkAlcohol = drinkAlcohol;
	};
    
    getHasAlcoholProblems() {
		return this.hasAlcoholProblems;
	};

	setHasAlcoholProblems(hasAlcoholProblems) {
		this.hasAlcoholProblems = hasAlcoholProblems;
	};
    
    getSmokingStatus() {
		return this.smokingStatus;
	};

	setSmokingStatus(smokingStatus) {
		this.smokingStatus = smokingStatus;
	};
    
    getDoPhysicalActivities() {
		return this.doPhysicalActivities;
	};

	setDoPhysicalActivities(doPhysicalActivities) {
		this.doPhysicalActivities = doPhysicalActivities;
	};
    
    getDoLeisureActivities() {
		return this.doLeisureActivities;
	};

	setDoLeisureActivities(doLeisureActivities) {
		this.doLeisureActivities = doLeisureActivities;
	};
    
    getCenterClubsFrequency() {
		return this.centerClubsFrequency;
	};

	setCenterClubsFrequency(centerClubsFrequency) {
		this.centerClubsFrequency = centerClubsFrequency;
	};
    
};

class EnvironmentalAssessment{
    constructor(hasLocomotionImpediments, hasLocomotionAids, isEnvLightingAdequate, hasSecurityInKitchenAndBedroom, hasSecurityInBathroom, hasSecurityInLadder){
         
        // Essential Field
        this.hasLocomotionImpediments = hasLocomotionImpediments;
         
        // Essential Field
        this.hasLocomotionAids = hasLocomotionAids;
         
        // Optional Field
        this.isEnvLightingAdequate = isEnvLightingAdequate;
         
        // Optional Field
        this.hasSecurityInKitchenAndBedroom = hasSecurityInKitchenAndBedroom;
         
        // Optional Field
        this.hasSecurityInBathroom = hasSecurityInBathroom;
         
        // Optional Field
        this.hasSecurityInLadder = hasSecurityInLadder;
        
    };
    
	
    getHasLocomotionImpediments() {
		return this.hasLocomotionImpediments;
	};

	setHasLocomotionImpediments(hasLocomotionImpediments) {
		this.hasLocomotionImpediments = hasLocomotionImpediments;
	};
    
    getHasLocomotionAids() {
		return this.hasLocomotionAids;
	};

	setHasLocomotionAids(hasLocomotionAids) {
		this.hasLocomotionAids = hasLocomotionAids;
	};
    
    getIsEnvLightingAdequate() {
		return this.isEnvLightingAdequate;
	};

	setIsEnvLightingAdequate(isEnvLightingAdequate) {
		this.isEnvLightingAdequate = isEnvLightingAdequate;
	};
    
    getHasSecurityInKitchenAndBedroom() {
		return this.hasSecurityInKitchenAndBedroom;
	};

	setHasSecurityInKitchenAndBedroom(hasSecurityInKitchenAndBedroom) {
		this.hasSecurityInKitchenAndBedroom = hasSecurityInKitchenAndBedroom;
	};
    
    getHasSecurityInBathroom() {
		return this.hasSecurityInBathroom;
	};

	setHasSecurityInBathroom(hasSecurityInBathroom) {
		this.hasSecurityInBathroom = hasSecurityInBathroom;
	};
    
    getHasSecurityInLadder() {
		return this.hasSecurityInLadder;
	};

	setHasSecurityInLadder(hasSecurityInLadder) {
		this.hasSecurityInLadder = hasSecurityInLadder;
	};
    
};

class ChronicPain{
    constructor(duration, sensation, local, intesity){
         
        // Essential Field
        this.duration = duration;
         
        // Essential Field
        this.sensation = sensation;
         
        // Essential Field
        this.local = local;
         
        // Essential Field
        this.intesity = intesity;
        
    };
    
	
    getDuration() {
		return this.duration;
	};

	setDuration(duration) {
		this.duration = duration;
	};
    
    getSensation() {
		return this.sensation;
	};

	setSensation(sensation) {
		this.sensation = sensation;
	};
    
    getLocal() {
		return this.local;
	};

	setLocal(local) {
		this.local = local;
	};
    
    getIntesity() {
		return this.intesity;
	};

	setIntesity(intesity) {
		this.intesity = intesity;
	};
    
};

class Fall{
    constructor(date, local, fractures, consequences){
         
        // Essential Field
        this.date = date;
         
        // Essential Field
        this.local = local;
         
        // Essential Field
        this.fractures = fractures;
         
        // Essential Field
        this.consequences = consequences;
        
    };
    
	
    getDate() {
		return this.date;
	};

	setDate(date) {
		this.date = date;
	};
    
    getLocal() {
		return this.local;
	};

	setLocal(local) {
		this.local = local;
	};
    
    getFractures() {
		return this.fractures;
	};

	setFractures(fractures) {
		this.fractures = fractures;
	};
    
    getConsequences() {
		return this.consequences;
	};

	setConsequences(consequences) {
		this.consequences = consequences;
	};
    
};

