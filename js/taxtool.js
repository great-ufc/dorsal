(function ($) {
    "use strict";
    var taxtool = null;
    /** Template: JS header */
    function getJSHeaderTemplate(){
        return `
/**
 * This Java model was automatically generated by the {{=it.toolName}} tool 
 * from taxonomy to older adult healthcare applications 
 * 
 * Araujo, I. L. D., Costa Junior, E., Duarte, P., Santos, I. D. S., 
 * Oliveira, P. A. M. D., Mendes, C. M. O., & Andrade, R. M. D. C. 
 * Towards a Taxonomy for the Development of Older Adults Healthcare 
 * Applications. In: Proceedings of the 53rd Hawaii International 
 * Conference on System Sciences. 2020.
 * 
 * This instrument aims to support the development of these applications.
 * 
 * Application Type: {{=it.appType.name}}
 * Application Type Description: {{=it.appType.description}}
 * Creation date: {{=it.creationDate}}
 * 
 * @author GREat Lab
 * @Link http://great.ufc.br
 */`;
    };

    /** Template: SensorAnnotation.java */
    function getSensorAnnotationTemplate(){
        return `
/**
 * This annotation defines which sensors can be used to fill the model fields.
 * @author <a href="http://great.ufc.br/">GREat Lab</a>
 */
public @interface SensorAnnotation {

    /**
     * @return list of sensors
     */
    String[] names();

}`;
    };

    /** Load the main model */
    function loadModel(){
        $.get(getDataSource(), function(data) {
            taxtool = new TaxTool(data);
            appsTypeSelect(taxtool.getAppsType());
            fillTheCards(taxtool);
            linkCAT02AndCAT05();
            applySubmitEvent();
            applyCheckAndUncheckEvents();
        });
    };

    /** CAT02 and CAT05 must be linked */
    function linkCAT02AndCAT05(){
        $($('input[value="CAT02"]')[0]).change(function(){
            if($(this).prop('checked')){
               $($('input[value="CAT05"]')[0]).bootstrapToggle('on');
            }
         });
    };

    /** Check and Uncheck events */
    function applyCheckAndUncheckEvents(){
        $('#checkAllBtn').on('click', function(){
            $('.selectCategory').bootstrapToggle('on');
        });
        $('#uncheckAllBtn').on('click', function(){
            $('.selectCategory').bootstrapToggle('off');
        });
    };

    /** Submit event */
    function applySubmitEvent(){
        var $submitBtn = $('#submitBtn');
        $submitBtn.attr("disabled", false);

        $submitBtn.on('click', function(){
            var selectedCategories = [];
            $('.selectCategory:checked').each(function() {
                selectedCategories.push($(this).val());
             });

             var appType = $("#applicationTypeSelect").val();
             var language = $("#targetProgLangSelect").val();
            if(appType != 'Null' && language != 'Null' &&
                selectedCategories.length > 0){
                // Generate the code
                taxtool.clearUserChoice();
                taxtool.setAppTypeInUserChoice(appType);
                taxtool.setTLangInUserChoice(language);
                taxtool.pushAllCategoriesInUserChoice(selectedCategories);
                // Just to check
                //taxtool.toStringUserChoice();
                applyTemplate(language);
            }else{
                alert('Please, you must select the application type, the target language and at least one data category.');
            }
        });
    };

    /** AppsType Select event */
    function appsTypeSelect(appsType){
        var $dropdown = $("#applicationTypeSelect");
        $.each(appsType, function() {
            $dropdown.append($("<option />").val(this.id).text(this.name));
        });

        $dropdown.change(function(){
            if($(this).val() == 'Null'){
                $("#appsTypeDiv").fadeOut();
            }else{
                $("#appsTypeDiv").fadeIn();
                $('.my-toggle').bootstrapToggle();
            }
        });
    };

    /** Fill the cards with categories */
    function fillTheCards(taxtool){
        var count = 0;
            var cardsRow = '<div class="row my-cards-row">'; 
            taxtool.getCategories().forEach(function(category){
                if(count != 0 && count % 6 == 0){
                    cardsRow += '</div>';
                    $('#appsTypeDiv').append(cardsRow);
                    cardsRow = '<div class="row my-cards-row">';
                }

                cardsRow += createCard(category.getID(), category.getName(), category.getDescription());
                count++;
            });

            if(taxtool.getCategories().length % 6 != 0){
                cardsRow += '</div>';
                $('#appsTypeDiv').append(cardsRow);
            }
    };

    /** Upper case the first character */
    function ucFirst(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    };

    /** Apply the template strategy */
    function applyTemplate(language){
        /** Preprocessing */
        var data = taxtool.getUserChoice();
        var tmpModel = {
            toolName: 'DORSAL',
            appType: data.appType,
            creationDate: new Date().toISOString(),
            jclasses: []
        };
        
        data.cats.forEach(function(category){
            category.getFields()
            .filter(f => f.classByAppType[data.appType.orderIndex] >= 0)
            .forEach(function(field){
                field['opDesc'] = (field.classByAppType[data.appType.orderIndex] == 1) ? 'Essential' : 'Optional';
                field['fnameC'] = ucFirst(field.getFname());
                var astBool = field.getCname().includes('*');
                var cname = (astBool) ? field.getCname().replace('*', '') : field.getCname();
                var r = tmpModel.jclasses.filter(obj => obj.cname == cname);
                if(r.length == 1){
                    r[0].fnames.push(field);
                    r[0].fnamesList.push(field.fname);
                }else{
                    if(astBool){
                        var fnameC = ucFirst(cname);
                        var mainClass = tmpModel.jclasses.filter(obj => obj.cname == 'OlderAdult');
                        if(mainClass.length == 1){
                            mainClass[0].fnames.push({
                                'sensorInfo': 'None',
                                     'jtype': 'List<' + cname + '>',
                                     'fname': cname.toLowerCase(),
                                    'fnameC': fnameC,
                                    'opDesc': 'Essential'
                            });
                            mainClass[0].fnamesList.push(cname.toLowerCase());
                        }
                    }
                    tmpModel.jclasses.push({
                             'cname': cname,
                            'fnames': [field],
                        'fnamesList': [field.fname]
                    });
                }
            });
        });

        var templatePath = null;
        if(language == 'java'){
            templatePath = 'js/templates/jclass.jst';
        }else if(language == 'javascript'){
            templatePath = 'js/templates/jsclass.jst';
        }else{
            alert('Invalid programming language!');
            return;
        }

        doT.templateSettings.strip = false;

        Promise.all([
            fetch(templatePath).then(template => template.text())
        ]).then(([template]) => {
            var zip = new JSZip();

            if(language == 'java'){
                var saTmp = doT.template(getSensorAnnotationTemplate());
                var saResult = saTmp({});
    
                zip.file('SensorAnnotation.java', saResult);
                
                tmpModel.jclasses.forEach(function(jclass){
                    var jClassTmp = doT.template(template);
                    var result = jClassTmp({
                             'appType': tmpModel.appType,
                            'toolName': tmpModel.toolName,
                        'creationDate': tmpModel.creationDate,
                               'cname': jclass.cname,
                              'fnames': jclass.fnames
                    });
                    result = result.replace(/<br>/gm, '\n\t');
                    zip.file(jclass.cname + '.java', result);
                });
    
                zip.generateAsync({type: "blob"}).then(function(content) {
                    saveAs(content, "dorsal-javaModel.zip");
                });
            }else if(language == 'javascript'){
                var modelString = '';

                var saTmp = doT.template(getJSHeaderTemplate());
                var saResult = saTmp({
                    'appType': tmpModel.appType,
                    'toolName': tmpModel.toolName,
                'creationDate': tmpModel.creationDate,
                });

                modelString += (saResult + '\n\n');

                tmpModel.jclasses.forEach(function(jclass){
                    var jClassTmp = doT.template(template);
                    var result = jClassTmp({
                            'cname': jclass.cname,
                            'fnames': jclass.fnames,
                    'fnamesJoinedList': jclass.fnamesList.join(', ')
                    });
                    modelString += (result + '\n\n');
                });

                zip.file('dorsal-jsModel.js', modelString);

                zip.generateAsync({type: "blob"}).then(function(content) {
                    saveAs(content, "dorsal-jsModel.zip");
                });
            }
        });
    };

    $(document).ready(function(){
        loadModel();
    });
})(jQuery);